<!-- sections/counter-products.liquid -->
<style>
  .counter-products-section {
    background: {{ section.settings.background_color }};
    padding: {{ section.settings.section_padding_top }}px 0 {{ section.settings.section_padding_bottom }}px;
    font-family: {{ section.settings.font_family }};
  }

  .counter-products-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .counter-products-header {
    background: {{ section.settings.header_background }};
    border-radius: {{ section.settings.border_radius }}px;
    padding: 30px;
    margin-bottom: 30px;
    display: flex;
    align-items: flex-start;
    gap: 40px;
  }

  .counter-content {
    flex: 0 0 20%;
    min-width: 285px;
  }

  .featured-products {
    flex: 1;
    display: flex;
    gap: 20px;
  }

  .counter-title {
    font-size: {{ section.settings.title_font_size }}px;
    font-weight: {{ section.settings.title_font_weight }};
    color: {{ section.settings.title_color }};
    margin: 0 0 10px 0;
    line-height: 1.2;
  }

  .counter-subtitle {
    font-size: {{ section.settings.subtitle_font_size }}px;
    color: {{ section.settings.subtitle_color }};
    margin: 0 0 8px 0;
  }

  .counter-description {
    font-size: {{ section.settings.description_font_size }}px;
    color: {{ section.settings.description_color }};
    margin: 0 0 20px 0;
  }

  .countdown-timer {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  .countdown-item {
    text-align: center;
    background: {{ section.settings.timer_background }};
    border-radius: {{ section.settings.timer_border_radius }}px;
    padding: 12px 16px;
    min-width: 60px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }

  .countdown-number {
    display: block;
    font-size: {{ section.settings.timer_number_size }}px;
    font-weight: {{ section.settings.timer_font_weight }};
    color: {{ section.settings.timer_number_color }};
    line-height: 1;
    margin-bottom: 3px;
  }

  .countdown-label {
    font-size: {{ section.settings.timer_label_size }}px;
    color: {{ section.settings.timer_label_color }};
    text-transform: capitalize;
    font-weight: 500;
  }

  /* Featured Products Styles */
  .featured-product {
    background: {{ section.settings.card_background }};
    border-radius: {{ section.settings.card_border_radius }}px;
    padding: 20px;
    box-shadow: 0 2px 15px rgba(0,0,0,0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
  }

  .featured-product:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 25px rgba(0,0,0,0.15);
  }

  /* First Featured Product - Horizontal Layout */
  .featured-product.horizontal {
    flex: 1;
    display: flex;
    gap: 20px;
    align-items: center;
  }

  .featured-product.horizontal .product-image {
    width: 220px;
    height: 220px;
    object-fit: contain;
    border-radius: {{ section.settings.image_border_radius }}px;
    background: {{ section.settings.image_background }};
    padding: 0px;
    flex-shrink: 0;
  }

  .featured-product.horizontal .product-content {
    flex: 1;
  }

  .featured-product.horizontal .product-title {
    font-size: {{ section.settings.featured_title_size }}px;
    font-weight: {{ section.settings.product_title_weight }};
    color: {{ section.settings.product_title_color }};
    margin: 0 0 8px 0;
    line-height: 1.3;
  }

  .product-features {
    list-style: none;
    padding: 0;
    margin: 0 0 10px 0;
  }

  .product-features li {
    font-size: {{ section.settings.feature_font_size }}px;
    color: {{ section.settings.feature_color }};
    margin-bottom: 4px;
    position: relative;
    padding-left: 15px;
  }

  .product-features li:before {
    content: "â€¢";
    color: {{ section.settings.bullet_color }};
    position: absolute;
    left: 0;
  }

  /* Second Featured Product - Vertical Layout */
  .featured-product.vertical {
    flex: 0 0 230px;
    text-align: center;
  }

  .featured-product.vertical .product-image {
    width: 100%;
    height: 120px;
    object-fit: contain;
    border-radius: {{ section.settings.image_border_radius }}px;
    margin-bottom: 15px;
    background: {{ section.settings.image_background }};
    padding: 10px;
  }

  .featured-product.vertical .product-title {
    font-size: {{ section.settings.product_title_size }}px;
    font-weight: {{ section.settings.product_title_weight }};
    color: {{ section.settings.product_title_color }};
    margin: 0 0 10px 0;
    line-height: 1.3;
  }

  .product-rating {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2px;
    margin-bottom: 8px;
  }

  .featured-product.horizontal .product-rating {
    justify-content: flex-start;
  }

  .star {
    color: {{ section.settings.star_color }};
    font-size: 14px;
  }

  .star.empty {
    color: {{ section.settings.star_empty_color }};
  }

  .product-price {
    font-size: {{ section.settings.price_font_size }}px;
    font-weight: {{ section.settings.price_font_weight }};
    color: {{ section.settings.price_color }};
    margin: 0;
  }

  /* Regular Products Grid */
  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 30px;
  }

  .product-card {
    background: {{ section.settings.card_background }};
    border-radius: {{ section.settings.card_border_radius }}px;
    padding: 20px;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 2px 15px rgba(0,0,0,0.08);
    cursor: pointer;
  }

  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 25px rgba(0,0,0,0.15);
  }

  .product-card .product-image {
    width: 100%;
    height: 160px;
    object-fit: contain;
    border-radius: {{ section.settings.image_border_radius }}px;
    margin-bottom: 15px;
    background: {{ section.settings.image_background }};
    padding: 10px;
  }

  .product-card .product-title {
    font-size: {{ section.settings.product_title_size }}px;
    font-weight: {{ section.settings.product_title_weight }};
    color: {{ section.settings.product_title_color }};
    margin: 0 0 10px 0;
    line-height: 1.3;
  }

  /* Mobile Carousel Styles */
  .products-carousel {
    display: none;
    position: relative;
    overflow: hidden;
    margin-top: 30px;
  }

  .carousel-container {
    display: flex;
    transition: transform 0.3s ease;
  }

  .carousel-slide {
    min-width: 50%;
    padding: 0 10px;
    box-sizing: border-box;
  }

  .carousel-controls {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 20px;
  }

  .carousel-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: {{ section.settings.dot_inactive_color }};
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .carousel-dot.active {
    background: {{ section.settings.dot_active_color }};
  }

  /* Mobile-only content section */
  .mobile-content-section {
    display: none;
    text-align: center;
    background: {{ section.settings.header_background }};
    border-radius: {{ section.settings.border_radius }}px;
    padding: 30px 20px;
    margin-bottom: 30px;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    /* Hide desktop header */
    .counter-products-header {
      display: none;
    }
    .counter-products-section {
    padding: 10px 0 20px !important;
}

    /* Show mobile content section */
    .mobile-content-section {
      display: block;
    }

    /* Hide desktop grid */
    .products-grid {
      display: none;
    }

    /* Show mobile carousel */
    .products-carousel {
      display: block;
    }

    .countdown-timer {
      justify-content: center;
    }

    /* Mobile countdown styling */
    .countdown-item {
      padding: 10px 14px;
      min-width: 55px;
    }
    
    .countdown-number {
      font-size: 20px;
    }
    
    .countdown-label {
      font-size: 11px;
    }

    /* Mobile product card adjustments */
    .carousel-slide .product-card {
      padding: 15px;
    }

    .carousel-slide .product-image {
      height: 140px;
    }

    .carousel-slide .product-title {
      font-size: 14px;
      margin-bottom: 8px;
    }

    .carousel-slide .product-price {
      font-size: 14px;
    }
  }

  @media (min-width: 769px) {
    .products-carousel {
      display: none;
    }
    
    .mobile-content-section {
      display: none;
    }
  }

  /* Compact mobile countdown for very small screens */
  @media (max-width: 480px) {
    .mobile-content-section {
      padding: 25px 15px;
    }
    
    .counter-title {
      font-size: 24px;
    }
    
    .counter-subtitle {
      font-size: 14px;
    }
    
    .counter-description {
      font-size: 12px;
    }
    
    .countdown-item {
      padding: 8px 12px;
      min-width: 50px;
    }
    
    .countdown-number {
      font-size: 18px;
    }
    
    .countdown-label {
      font-size: 10px;
    }

    .carousel-slide .product-card {
      padding: 12px;
    }

    .carousel-slide .product-image {
      height: 120px;
    }
  }
</style>

<div class="counter-products-section">
  <div class="counter-products-container">
    
    <!-- Desktop Header (Hidden on Mobile) -->
    <div class="counter-products-header">
      <!-- Left: Content and Timer (30%) -->
      <div class="counter-content">
        {% if section.settings.title != blank %}
          <h2 class="counter-title">{{ section.settings.title }}</h2>
        {% endif %}
        {% if section.settings.subtitle != blank %}
          <p class="counter-subtitle">{{ section.settings.subtitle }}</p>
        {% endif %}
        {% if section.settings.description != blank %}
          <p class="counter-description">{{ section.settings.description }}</p>
        {% endif %}
        
        <div class="countdown-timer" id="countdown-timer-desktop">
          <div class="countdown-item">
            <span class="countdown-number" id="days-desktop">00</span>
            <span class="countdown-label">Days</span>
          </div>
          <div class="countdown-item">
            <span class="countdown-number" id="hours-desktop">00</span>
            <span class="countdown-label">Hours</span>
          </div>
          <div class="countdown-item">
            <span class="countdown-number" id="minutes-desktop">00</span>
            <span class="countdown-label">Mins</span>
          </div>
          <div class="countdown-item">
            <span class="countdown-number" id="seconds-desktop">00</span>
            <span class="countdown-label">Secs</span>
          </div>
        </div>
      </div>

      <!-- Right: Featured Products (70%) -->
      <div class="featured-products">
        <!-- First Featured Product: Horizontal Layout -->
        {% if section.settings.featured_product_1 != blank %}
          {% assign featured_product_1 = all_products[section.settings.featured_product_1] %}
          <div class="featured-product horizontal" onclick="window.open('{{ featured_product_1.url }}', '_self')">
            {% if featured_product_1.featured_image %}
              <img src="{{ featured_product_1.featured_image | img_url: '200x200' }}" 
                   alt="{{ featured_product_1.title }}" 
                   class="product-image"
                   loading="lazy">
            {% endif %}
            
            <div class="product-content">
              <h3 class="product-title">{{ featured_product_1.title }}</h3>
              
              {% if featured_product_1.description != blank %}
                {% assign description_lines = featured_product_1.description | strip_html | split: '.' | slice: 0, 3 %}
                <ul class="product-features">
                  {% for line in description_lines %}
                    {% if line != blank %}
                      <li>{{ line | strip }}</li>
                    {% endif %}
                  {% endfor %}
                </ul>
              {% endif %}
              
              <div class="product-rating">
                {% for i in (1..5) %}
                  {% if i <= 4 %}
                    <span class="star">â˜…</span>
                  {% else %}
                    <span class="star empty">â˜…</span>
                  {% endif %}
                {% endfor %}
              </div>
              
              <p class="product-price">
                {% if featured_product_1.compare_at_price > featured_product_1.price %}
                  <span style="text-decoration: line-through; color: #999; margin-right: 10px; font-size: 14px;">
                    {{ featured_product_1.compare_at_price | money }}
                  </span>
                {% endif %}
                {{ featured_product_1.price | money }}
              </p>
            </div>
          </div>
        {% endif %}

        <!-- Second Featured Product: Vertical Layout -->
        {% if section.settings.featured_product_2 != blank %}
          {% assign featured_product_2 = all_products[section.settings.featured_product_2] %}
          <div class="featured-product vertical" onclick="window.open('{{ featured_product_2.url }}', '_self')">
            {% if featured_product_2.featured_image %}
              <img src="{{ featured_product_2.featured_image | img_url: '200x200' }}" 
                   alt="{{ featured_product_2.title }}" 
                   class="product-image"
                   loading="lazy">
            {% endif %}
            
            <h3 class="product-title">{{ featured_product_2.title }}</h3>
            
            <div class="product-rating">
              {% for i in (1..5) %}
                {% if i <= 4 %}
                  <span class="star">â˜…</span>
                {% else %}
                  <span class="star empty">â˜…</span>
                {% endif %}
              {% endfor %}
            </div>
            
            <p class="product-price">
              {% if featured_product_2.compare_at_price > featured_product_2.price %}
                <span style="text-decoration: line-through; color: #999; margin-right: 8px; font-size: 12px;">
                  {{ featured_product_2.compare_at_price | money }}
                </span>
              {% endif %}
              {{ featured_product_2.price | money }}
            </p>
          </div>
        {% endif %}
      </div>
    </div>

    <!-- Mobile Content Section (Hidden on Desktop) -->
    <div class="mobile-content-section">
      {% if section.settings.title != blank %}
        <h2 class="counter-title">{{ section.settings.title }}</h2>
      {% endif %}
      {% if section.settings.subtitle != blank %}
        <p class="counter-subtitle">{{ section.settings.subtitle }}</p>
      {% endif %}
      {% if section.settings.description != blank %}
        <p class="counter-description">{{ section.settings.description }}</p>
      {% endif %}
      
      <div class="countdown-timer" id="countdown-timer-mobile">
        <div class="countdown-item">
          <span class="countdown-number" id="days-mobile">00</span>
          <span class="countdown-label">Days</span>
        </div>
        <div class="countdown-item">
          <span class="countdown-number" id="hours-mobile">00</span>
          <span class="countdown-label">Hours</span>
        </div>
        <div class="countdown-item">
          <span class="countdown-number" id="minutes-mobile">00</span>
          <span class="countdown-label">Mins</span>
        </div>
        <div class="countdown-item">
          <span class="countdown-number" id="seconds-mobile">00</span>
          <span class="countdown-label">Secs</span>
        </div>
      </div>
    </div>

    <!-- Desktop Products Grid (Hidden on Mobile) -->
    <div class="products-grid">
      {% for block in section.blocks %}
        {% if block.type == 'product' and block.settings.product != blank %}
          {% assign product = all_products[block.settings.product] %}
          <div class="product-card" onclick="window.open('{{ product.url }}', '_self')">
            {% if product.featured_image %}
              <img src="{{ product.featured_image | img_url: '300x300' }}" 
                   alt="{{ product.title }}" 
                   class="product-image"
                   loading="lazy">
            {% endif %}
            
            <h3 class="product-title">{{ product.title }}</h3>
            
            <div class="product-rating">
              {% for i in (1..5) %}
                {% if i <= 4 %}
                  <span class="star">â˜…</span>
                {% else %}
                  <span class="star empty">â˜…</span>
                {% endif %}
              {% endfor %}
            </div>
            
            <p class="product-price">
              {% if product.compare_at_price > product.price %}
                <span style="text-decoration: line-through; color: #999; margin-right: 10px;">
                  {{ product.compare_at_price | money }}
                </span>
              {% endif %}
              {{ product.price | money }}
            </p>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <!-- Mobile Products Carousel (Hidden on Desktop) -->
    <div class="products-carousel">
      <div class="carousel-container" id="carousel-container">
        {% for block in section.blocks %}
          {% if block.type == 'product' and block.settings.product != blank %}
            {% assign product = all_products[block.settings.product] %}
            <div class="carousel-slide">
              <div class="product-card" onclick="window.open('{{ product.url }}', '_self')">
                {% if product.featured_image %}
                  <img src="{{ product.featured_image | img_url: '300x300' }}" 
                       alt="{{ product.title }}" 
                       class="product-image"
                       loading="lazy">
                {% endif %}
                
                <h3 class="product-title">{{ product.title }}</h3>
                
                <div class="product-rating">
                  {% for i in (1..5) %}
                    {% if i <= 4 %}
                      <span class="star">â˜…</span>
                    {% else %}
                      <span class="star empty">â˜…</span>
                    {% endif %}
                  {% endfor %}
                </div>
                
                <p class="product-price">
                  {% if product.compare_at_price > product.price %}
                    <span style="text-decoration: line-through; color: #999; margin-right: 10px;">
                      {{ product.compare_at_price | money }}
                    </span>
                  {% endif %}
                  {{ product.price | money }}
                </p>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
      
      {% assign carousel_products_count = 0 %}
      {% for block in section.blocks %}
        {% if block.type == 'product' and block.settings.product != blank %}
          {% assign carousel_products_count = carousel_products_count | plus: 1 %}
        {% endif %}
      {% endfor %}
      
      {% if carousel_products_count > 2 %}
        <div class="carousel-controls">
          {% assign total_slides = carousel_products_count | minus: 1 | divided_by: 2 | plus: 1 %}
          {% for i in (1..total_slides) %}
            <span class="carousel-dot {% if forloop.first %}active{% endif %}" 
                  onclick="goToSlide({{ forloop.index0 }})"></span>
          {% endfor %}
        </div>
      {% endif %}
    </div>
  </div>
</div>

<script>
 // Enhanced Counter Products JavaScript with Mobile Touch Support and Navigation Arrows

class CounterProductsCarousel {
  constructor() {
    this.currentSlide = 0;
    this.totalProducts = 0;
    this.totalSlides = 0;
    this.isAnimating = false;
    this.autoplayInterval = null;
    this.touchStartX = 0;
    this.touchEndX = 0;
    this.isDragging = false;
    this.dragThreshold = 50; // Minimum distance for drag to trigger slide change
    
    this.init();
  }

  init() {
    this.initCountdown();
    this.setupCarousel();
    this.bindEvents();
    this.startAutoplay();
  }

  // Countdown Timer
  initCountdown() {
    const endDate = new Date();
    const countdownSettings = this.getCountdownSettings();
    
    endDate.setDate(endDate.getDate() + countdownSettings.days);
    endDate.setHours(endDate.getHours() + countdownSettings.hours);
    endDate.setMinutes(endDate.getMinutes() + countdownSettings.minutes);
    endDate.setSeconds(endDate.getSeconds() + countdownSettings.seconds);

    const updateCountdown = () => {
      const now = new Date().getTime();
      const distance = endDate - now;

      if (distance < 0) {
        this.resetCountdown();
        return;
      }

      const timeUnits = this.calculateTimeUnits(distance);
      this.updateCountdownDisplay(timeUnits);
    };

    updateCountdown();
    setInterval(updateCountdown, 1000);
  }

  getCountdownSettings() {
    // Extract countdown settings from section settings or use defaults
    const sectionElement = document.querySelector('.counter-products-section');
    return {
      days: parseInt(sectionElement?.dataset.countdownDays) || 7,
      hours: parseInt(sectionElement?.dataset.countdownHours) || 0,
      minutes: parseInt(sectionElement?.dataset.countdownMinutes) || 0,
      seconds: parseInt(sectionElement?.dataset.countdownSeconds) || 0
    };
  }

  calculateTimeUnits(distance) {
    return {
      days: Math.floor(distance / (1000 * 60 * 60 * 24)),
      hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),
      minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),
      seconds: Math.floor((distance % (1000 * 60)) / 1000)
    };
  }

  updateCountdownDisplay(timeUnits) {
    ['desktop', 'mobile'].forEach(suffix => {
      const elements = {
        days: document.getElementById(`days-${suffix}`),
        hours: document.getElementById(`hours-${suffix}`),
        minutes: document.getElementById(`minutes-${suffix}`),
        seconds: document.getElementById(`seconds-${suffix}`)
      };
      
      Object.entries(elements).forEach(([unit, element]) => {
        if (element) {
          element.textContent = timeUnits[unit].toString().padStart(2, '0');
        }
      });
    });
  }

  resetCountdown() {
    ['desktop', 'mobile'].forEach(suffix => {
      ['days', 'hours', 'minutes', 'seconds'].forEach(unit => {
        const element = document.getElementById(`${unit}-${suffix}`);
        if (element) element.textContent = '00';
      });
    });
  }

  // Carousel Setup
  setupCarousel() {
    this.totalProducts = document.querySelectorAll('.carousel-slide').length;
    this.totalSlides = Math.max(0, Math.ceil(this.totalProducts / 2) - 1);
    
    this.createNavigationArrows();
    this.updateCarouselVisibility();
  }

  createNavigationArrows() {
    const carousel = document.querySelector('.products-carousel');
    if (!carousel || this.totalProducts <= 2) return;

    // Create arrows container
    const arrowsContainer = document.createElement('div');
    arrowsContainer.className = 'carousel-arrows';
    arrowsContainer.innerHTML = `
      <button class="carousel-arrow carousel-arrow-prev" aria-label="Previous products">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>
      <button class="carousel-arrow carousel-arrow-next" aria-label="Next products">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
    `;

    // Add CSS for arrows
    this.addArrowStyles();
    
    // Insert arrows before carousel controls
    const controls = carousel.querySelector('.carousel-controls');
    if (controls) {
      carousel.insertBefore(arrowsContainer, controls);
    } else {
      carousel.appendChild(arrowsContainer);
    }
  }

  addArrowStyles() {
    if (document.getElementById('carousel-arrow-styles')) return;

    const style = document.createElement('style');
    style.id = 'carousel-arrow-styles';
    style.textContent = `
      .carousel-arrows {
        display: none;
        justify-content: space-between;
        align-items: center;
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        transform: translateY(-50%);
        pointer-events: none;
        z-index: 10;
      }

      .carousel-arrow {
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        pointer-events: auto;
        color: #333;
      }

      .carousel-arrow:hover {
        background: rgba(255, 255, 255, 1);
        transform: scale(1.1);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      }

      .carousel-arrow:active {
        transform: scale(0.95);
      }

      .carousel-arrow-prev {
        margin-left: -22px;
      }

      .carousel-arrow-next {
        margin-right: -22px;
      }

      .carousel-arrow:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
      }

      @media (max-width: 480px) {
        .carousel-arrow {
          width: 36px;
          height: 36px;
        }
        
        .carousel-arrow svg {
          width: 18px;
          height: 18px;
        }
      }
    `;
    document.head.appendChild(style);
  }

  // Event Bindings
  bindEvents() {
    // Arrow navigation
    document.addEventListener('click', (e) => {
      if (e.target.closest('.carousel-arrow-prev')) {
        this.goToPrevSlide();
      } else if (e.target.closest('.carousel-arrow-next')) {
        this.goToNextSlide();
      }
    });

    // Dot navigation
    document.addEventListener('click', (e) => {
      const dot = e.target.closest('.carousel-dot');
      if (dot) {
        const dots = Array.from(document.querySelectorAll('.carousel-dot'));
        const index = dots.indexOf(dot);
        if (index !== -1) {
          this.goToSlide(index);
        }
      }
    });

    // Touch events
    const carousel = document.querySelector('.products-carousel');
    if (carousel) {
      carousel.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: true });
      carousel.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
      carousel.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: true });
    }

    // Mouse events for desktop drag
    if (carousel) {
      carousel.addEventListener('mousedown', (e) => this.handleMouseDown(e));
      carousel.addEventListener('mousemove', (e) => this.handleMouseMove(e));
      carousel.addEventListener('mouseup', (e) => this.handleMouseEnd(e));
      carousel.addEventListener('mouseleave', (e) => this.handleMouseEnd(e));
    }

    // Keyboard navigation
    document.addEventListener('keydown', (e) => this.handleKeyDown(e));

    // Window resize
    window.addEventListener('resize', () => this.handleResize());

    // Pause autoplay on hover
    if (carousel) {
      carousel.addEventListener('mouseenter', () => this.pauseAutoplay());
      carousel.addEventListener('mouseleave', () => this.startAutoplay());
    }
  }

  // Touch Events
  handleTouchStart(e) {
    this.touchStartX = e.touches[0].clientX;
    this.isDragging = true;
    this.pauseAutoplay();
  }

  handleTouchMove(e) {
    if (!this.isDragging) return;
    
    // Prevent default scrolling when dragging horizontally
    const touchCurrentX = e.touches[0].clientX;
    const diffX = Math.abs(touchCurrentX - this.touchStartX);
    
    if (diffX > 10) {
      e.preventDefault();
    }
  }

  handleTouchEnd(e) {
    if (!this.isDragging) return;
    
    this.touchEndX = e.changedTouches[0].clientX;
    this.handleSwipe();
    this.isDragging = false;
    this.startAutoplay();
  }

  // Mouse Events (for desktop drag)
  handleMouseDown(e) {
    this.touchStartX = e.clientX;
    this.isDragging = true;
    this.pauseAutoplay();
    e.preventDefault();
  }

  handleMouseMove(e) {
    if (!this.isDragging) return;
    e.preventDefault();
  }

  handleMouseEnd(e) {
    if (!this.isDragging) return;
    
    this.touchEndX = e.clientX;
    this.handleSwipe();
    this.isDragging = false;
    this.startAutoplay();
  }

  // Swipe handling
  handleSwipe() {
    const swipeDistance = this.touchStartX - this.touchEndX;
    
    if (Math.abs(swipeDistance) < this.dragThreshold) return;
    
    if (swipeDistance > 0) {
      // Swiped left - go to next slide
      this.goToNextSlide();
    } else {
      // Swiped right - go to previous slide
      this.goToPrevSlide();
    }
  }

  // Keyboard navigation
  handleKeyDown(e) {
    if (!this.isCarouselVisible()) return;
    
    switch(e.key) {
      case 'ArrowLeft':
        e.preventDefault();
        this.goToPrevSlide();
        break;
      case 'ArrowRight':
        e.preventDefault();
        this.goToNextSlide();
        break;
    }
  }

  // Window resize
  handleResize() {
    this.updateCarouselVisibility();
    if (window.innerWidth <= 768) {
      this.goToSlide(0);
    }
  }

  // Carousel Navigation
  goToSlide(index) {
    if (this.isAnimating || index === this.currentSlide) return;
    
    this.currentSlide = Math.max(0, Math.min(index, this.totalSlides));
    this.updateCarousel();
  }

  goToNextSlide() {
    if (this.totalProducts <= 2) return;
    
    const nextSlide = this.currentSlide >= this.totalSlides ? 0 : this.currentSlide + 1;
    this.goToSlide(nextSlide);
  }

  goToPrevSlide() {
    if (this.totalProducts <= 2) return;
    
    const prevSlide = this.currentSlide <= 0 ? this.totalSlides : this.currentSlide - 1;
    this.goToSlide(prevSlide);
  }

  updateCarousel() {
    const container = document.getElementById('carousel-container');
    const dots = document.querySelectorAll('.carousel-dot');
    const arrows = document.querySelectorAll('.carousel-arrow');
    
    if (!container) return;
    
    this.isAnimating = true;
    
    // Update container transform
    container.style.transform = `translateX(-${this.currentSlide * 100}%)`;
    
    // Update dots
    dots.forEach((dot, i) => {
      dot.classList.toggle('active', i === this.currentSlide);
    });
    
    // Update arrows state
    this.updateArrowsState();
    
    // Reset animation flag
    setTimeout(() => {
      this.isAnimating = false;
    }, 300);
  }

  updateArrowsState() {
    const prevArrow = document.querySelector('.carousel-arrow-prev');
    const nextArrow = document.querySelector('.carousel-arrow-next');
    
    if (!prevArrow || !nextArrow) return;
    
    // Enable/disable arrows based on current position
    // For infinite loop, we don't disable arrows
    prevArrow.disabled = false;
    nextArrow.disabled = false;
  }

  // Autoplay functionality
  startAutoplay() {
    if (this.autoplayInterval || !this.isCarouselVisible() || this.totalProducts <= 2) return;
    
    const speed = this.getAutoplaySpeed();
    this.autoplayInterval = setInterval(() => {
      this.goToNextSlide();
    }, speed * 1000);
  }

  pauseAutoplay() {
    if (this.autoplayInterval) {
      clearInterval(this.autoplayInterval);
      this.autoplayInterval = null;
    }
  }

  getAutoplaySpeed() {
    const sectionElement = document.querySelector('.counter-products-section');
    return parseInt(sectionElement?.dataset.autoplaySpeed) || 5;
  }

  // Utility functions
  isCarouselVisible() {
    return window.innerWidth <= 768;
  }

  updateCarouselVisibility() {
    const carousel = document.querySelector('.products-carousel');
    const grid = document.querySelector('.products-grid');
    
    if (window.innerWidth <= 768) {
      if (carousel) carousel.style.display = 'block';
      if (grid) grid.style.display = 'none';
    } else {
      if (carousel) carousel.style.display = 'none';
      if (grid) grid.style.display = 'grid';
      this.pauseAutoplay();
    }
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  new CounterProductsCarousel();
});

// Export for module usage (if needed)
if (typeof module !== 'undefined' && module.exports) {
  module.exports = CounterProductsCarousel;
}
</script>


{% schema %}
{
  "name": "Counter Products Enhanced",
  "tag": "section",
  "class": "counter-products-section",
  "settings": [
    {
      "type": "header",
      "content": "Section Settings"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#f0f8f0"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "label": "Section Padding Top",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 50
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "label": "Section Padding Bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 50
    },
    {
      "type": "select",
      "id": "font_family",
      "label": "Font Family",
      "options": [
        {
          "value": "Arial, sans-serif",
          "label": "Arial"
        },
        {
          "value": "Helvetica, sans-serif",
          "label": "Helvetica"
        },
        {
          "value": "Georgia, serif",
          "label": "Georgia"
        },
        {
          "value": "'Times New Roman', serif",
          "label": "Times New Roman"
        }
      ],
      "default": "Arial, sans-serif"
    },
    {
      "type": "header",
      "content": "Header Settings"
    },
    {
      "type": "color",
      "id": "header_background",
      "label": "Header Background",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Border Radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "default": 16
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Best Price in this month"
    },
    {
      "type": "range",
      "id": "title_font_size",
      "label": "Title Font Size",
      "min": 18,
      "max": 50,
      "step": 2,
      "default": 32
    },
    {
      "type": "select",
      "id": "title_font_weight",
      "label": "Title Font Weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "700"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title Color",
      "default": "#2d3748"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Fresh deal everyday."
    },
    {
      "type": "range",
      "id": "subtitle_font_size",
      "label": "Subtitle Font Size",
      "min": 12,
      "max": 24,
      "step": 1,
      "default": 16
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle Color",
      "default": "#4a5568"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Limited time offer - don't miss out!"
    },
    {
      "type": "range",
      "id": "description_font_size",
      "label": "Description Font Size",
      "min": 10,
      "max": 20,
      "step": 1,
      "default": 14
    },
    {
      "type": "color",
      "id": "description_color",
      "label": "Description Color",
      "default": "#718096"
    },
    {
      "type": "header",
      "content": "Countdown Timer Settings"
    },
    {
      "type": "range",
      "id": "countdown_days",
      "label": "Countdown Days",
      "min": 0,
      "max": 100,
      "step": 1,
      "default": 7
    },
    {
      "type": "range",
      "id": "countdown_hours",
      "label": "Countdown Hours",
      "min": 0,
      "max": 23,
      "step": 1,
      "default": 0
    },
    {
      "type": "range",
      "id": "countdown_minutes",
      "label": "Countdown Minutes",
      "min": 0,
      "max": 59,
      "step": 1,
      "default": 0
    },
    {
      "type": "range",
      "id": "countdown_seconds",
      "label": "Countdown Seconds",
      "min": 0,
      "max": 59,
      "step": 1,
      "default": 0
    },
    {
      "type": "color",
      "id": "timer_background",
      "label": "Timer Background",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "timer_border_radius",
      "label": "Timer Border Radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "default": 8
    },
    {
      "type": "range",
      "id": "timer_number_size",
      "label": "Timer Number Size",
      "min": 16,
      "max": 36,
      "step": 2,
      "default": 24
    },
    {
      "type": "select",
      "id": "timer_font_weight",
      "label": "Timer Font Weight",
      "options": [
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        },
        {
          "value": "800",
          "label": "Extra Bold"
        }
      ],
      "default": "700"
    },
    {
      "type": "color",
      "id": "timer_number_color",
      "label": "Timer Number Color",
      "default": "#2d3748"
    },
    {
      "type": "range",
      "id": "timer_label_size",
      "label": "Timer Label Size",
      "min": 10,
      "max": 16,
      "step": 1,
      "default": 12
    },
    {
      "type": "color",
      "id": "timer_label_color",
      "label": "Timer Label Color",
      "default": "#718096"
    },
    {
      "type": "header",
      "content": "Featured Products Settings"
    },
    {
      "type": "product",
      "id": "featured_product_1",
      "label": "Featured Product 1 (Horizontal)"
    },
    {
      "type": "product",
      "id": "featured_product_2",
      "label": "Featured Product 2 (Vertical)"
    },
    {
      "type": "range",
      "id": "featured_title_size",
      "label": "Featured Product Title Size",
      "min": 16,
      "max": 28,
      "step": 1,
      "default": 20
    },
    {
      "type": "header",
      "content": "Product Card Settings"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card Background",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "label": "Card Border Radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "default": 12
    },
    {
      "type": "color",
      "id": "image_background",
      "label": "Image Background",
      "default": "#f7fafc"
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "label": "Image Border Radius",
      "min": 0,
      "max": 15,
      "step": 1,
      "default": 8
    },
    {
      "type": "range",
      "id": "product_title_size",
      "label": "Product Title Size",
      "min": 12,
      "max": 20,
      "step": 1,
      "default": 16
    },
    {
      "type": "select",
      "id": "product_title_weight",
      "label": "Product Title Weight",
      "options": [
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "600"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product Title Color",
      "default": "#2d3748"
    },
    {
      "type": "range",
      "id": "feature_font_size",
      "label": "Feature Font Size",
      "min": 11,
      "max": 16,
      "step": 1,
      "default": 13
    },
    {
      "type": "color",
      "id": "feature_color",
      "label": "Feature Color",
      "default": "#718096"
    },
    {
      "type": "color",
      "id": "bullet_color",
      "label": "Bullet Color",
      "default": "#48bb78"
    },
    {
      "type": "color",
      "id": "star_color",
      "label": "Star Color",
      "default": "#ffc107"
    },
    {
      "type": "color",
      "id": "star_empty_color",
      "label": "Empty Star Color",
      "default": "#e2e8f0"
    },
    {
      "type": "range",
      "id": "price_font_size",
      "label": "Price Font Size",
      "min": 14,
      "max": 24,
      "step": 1,
      "default": 18
    },
    {
      "type": "select",
      "id": "price_font_weight",
      "label": "Price Font Weight",
      "options": [
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        },
        {
          "value": "800",
          "label": "Extra Bold"
        }
      ],
      "default": "700"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price Color",
      "default": "#48bb78"
    },
    {
      "type": "header",
      "content": "Mobile Carousel Settings"
    },
    {
      "type": "range",
      "id": "carousel_autoplay_speed",
      "label": "Autoplay Speed (seconds)",
      "min": 3,
      "max": 10,
      "step": 1,
      "default": 5
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active Dot Color",
      "default": "#48bb78"
    },
    {
      "type": "color",
      "id": "dot_inactive_color",
      "label": "Inactive Dot Color",
      "default": "#e2e8f0"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Counter Products Enhanced",
      "category": "Product",
      "blocks": [
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        }
      ]
    }
  ]
}
{% endschema %}